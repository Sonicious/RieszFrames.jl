var documenterSearchIndex = {"docs":
[{"location":"frames/#Some-Frame-Functions","page":"Frame Functions","title":"Some Frame Functions","text":"","category":"section"},{"location":"frames/","page":"Frame Functions","title":"Frame Functions","text":"The following frame functions are possible to use as the framefunction argument. The theory behind the construction is documented here","category":"page"},{"location":"frames/","page":"Frame Functions","title":"Frame Functions","text":"Held\nShannon\nPapadakis\nSimoncelli","category":"page"},{"location":"frames/#RieszFrames.Held","page":"Frame Functions","title":"RieszFrames.Held","text":"Held(x,[,m])\n\ngenerates the Held-Wavelet with the smoothness m\n\nThe Wavelet is constructed according to the paper S. Held, M. Storath, P. Massopust and B. Forster, \"Steerable Wavelet Frames Based on the Riesz Transform\" doi: 10.1109/TIP.2009.2036713\n\n\n\n\n\n","category":"function"},{"location":"frames/#RieszFrames.Shannon","page":"Frame Functions","title":"RieszFrames.Shannon","text":"Shannon(x)\n\ngenerates theShannon Wavelet Frame\n\n\n\n\n\n","category":"function"},{"location":"frames/#RieszFrames.Papadakis","page":"Frame Functions","title":"RieszFrames.Papadakis","text":"Papadakis(x)\n\ngenerates the Papadakis Wavelet Frame\n\n\n\n\n\n","category":"function"},{"location":"frames/#RieszFrames.Simoncelli","page":"Frame Functions","title":"RieszFrames.Simoncelli","text":"Simoncelli(x)\n\ngenerates the Simoncelli Wavelet Frame\n\n\n\n\n\n","category":"function"},{"location":"utilities/#Generation-Functions","page":"Utility Functions","title":"Generation Functions","text":"","category":"section"},{"location":"utilities/#filterbank-generations","page":"Utility Functions","title":"filterbank generations","text":"","category":"section"},{"location":"utilities/","page":"Utility Functions","title":"Utility Functions","text":"These functions help to generate data to get more control of the algorithm","category":"page"},{"location":"utilities/","page":"Utility Functions","title":"Utility Functions","text":"GenerateFrameFilters2D\nGenerateRieszFilters2D","category":"page"},{"location":"utilities/#RieszFrames.GenerateFrameFilters2D","page":"Utility Functions","title":"RieszFrames.GenerateFrameFilters2D","text":"GenerateFrameFilters2D(filtersize[, maxscale, framefunction, type])\n\nGenerate the Frame filterbank for the according filtersize and choosen Motherwavelet\n\nArguments\n\nmaxscale: The amount of downsampling steps the filter is generated for (default: 8).\nframefunction: This is the function of the motherwavelet (default: Held).\ntype: The type specifies the floating point type of the filterbanks (default: Float64).\n\nExample\n\njulia> filterbank = GenerateFrameFilters2D((64, 64))\njulia> filterbank = GenerateFrameFilters2D((32, 32), 3, Held, Float32)\n\n\n\n\n\n","category":"function"},{"location":"utilities/#RieszFrames.GenerateRieszFilters2D","page":"Utility Functions","title":"RieszFrames.GenerateRieszFilters2D","text":"GenerateRieszFilters2D(filtersize[, maxrieszorder, type])\n\nGenerate the Riesz filterbank for the according filtersize and depth of Riesz\n\nHigher order Riesz transforms can be achieved by raising the umber of maxrieszorder. The according filterbank is of a pyramid scheme. The filtersize is a tuple\n\nExample\n\njulia> filterbank = GenerateFrameFilters2D((128, 64))\njulia> filterbank = GenerateFrameFilters2D((32, 32), 3, Papadakis, Float64)\n\n\n\n\n\n","category":"function"},{"location":"utilities/#utility-functions","page":"Utility Functions","title":"utility functions","text":"","category":"section"},{"location":"utilities/","page":"Utility Functions","title":"Utility Functions","text":"GenerateRadius1D\nGenerateRadius2D","category":"page"},{"location":"utilities/#RieszFrames.GenerateRadius1D","page":"Utility Functions","title":"RieszFrames.GenerateRadius1D","text":"GenerateRadius1D(filtersize[, type])\n\nGenerates the Radius for a given 1D filtersize\n\n\n\n\n\n","category":"function"},{"location":"utilities/#RieszFrames.GenerateRadius2D","page":"Utility Functions","title":"RieszFrames.GenerateRadius2D","text":"GenerateRadius2D(filtersize[, type])\n\nGenerates the Radius for a given 2D filtersize\n\n\n\n\n\n","category":"function"},{"location":"#RieszFrames","page":"Introduction","title":"RieszFrames","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package delivers several functions and algorithms which were introduced in the PhD Thesis of Martin Reinhardt.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\"algorithms.md\", \"utilities.md\", \"frames.md\"]\nDepth = 1","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Important references with algorithmic ideas:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"PhD Thesis\nSteerable Pyramids and Tight Wavelet Frames in L2\nSteerable Wavelet Frames Based on the Riesz Transform","category":"page"},{"location":"algorithms/#Algorithms","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/#Equalization-of-Brightness","page":"Algorithms","title":"Equalization of Brightness","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"The Equalization of Brightness algorithm normalizes the amplitude of an image without change of phases and therefore of structure. ","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"In general the algorithm can be applied to any image image which resembles a 2D array through Eob(image). In this case all default values are created and can be reused. For more complex and sophisticated situations wiht mnore control, it is recommended to use the EobAlgorithm command, where the filterbanks and the regularitzation parameter can be stated explicitely. To help with the creation of own steerable Riesz filterbanks, the function EobInitialization can be used.","category":"page"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"Eob\nEobInitialization\nEobAlgorithm","category":"page"},{"location":"algorithms/#RieszFrames.Eob","page":"Algorithms","title":"RieszFrames.Eob","text":"Eob(input[, type=Float64])\n\nEqualization of Brighness (Eob) with default values and new Initializationof the steerable filterbanks.\n\nArguments\n\ninput: this is the input grayscale image of any size. It will be converted into an according floating point structure during runtime\ntype: The type specifies the floating point type of the filterbanks (default: Float64).\n\nExample\n\njulia> Eob(rand(Float32,16,16));\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#RieszFrames.EobInitialization","page":"Algorithms","title":"RieszFrames.EobInitialization","text":"EobInitialization(inputsize[, maxscale=8, type=Float64, framefunction=Held])\n\nCalculate the Filters and all preallocations for the EoB Algorithm for images of size in input\n\nThis function is especially usefulf for the generation of a new filterbank which is then used for batch processing of the Eob Algorithm. All important parameters can be set individually. The function wraps the calls to GenerateFrameFilters2D The functions of Generation Functions give more explanation about the parameters\n\nExample\n\njulia> testImage = rand(Float64,16,16);\njulia> EobInitialize(size(testImage));\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#RieszFrames.EobAlgorithm","page":"Algorithms","title":"RieszFrames.EobAlgorithm","text":"EobAlgorithm(input[, regularization=0.001, framefilterbank=framebank[], rieszfilterbank=rieszbank[], type=Float64])\n\nCalculate the EqualizationOfBrightness Algorithm with given values. It uses the default Values from the Initialization\n\nThis function is for more sophisticated applications, where the algorithm is batch-processed and the filterbanks are reused every time. This improves the performance because they can be reused. additionally the regularization parameter can be set individually. The applicaiton of the filterbanks is multithreaded\n\nArguments\n\ninput: input image. Must be a 2D Array of a floating point type\nregularization: this parameter controls the regularization of the algorithm. 0 is a possible input for no regularization (default: 0.001)\nframefilterbank: a valid frame filterbank array for the input image (default: global initialized framefilterbank)\nrieszfilterbank: a valid riesz filterbank array for the input image (default: global initialized rieszfilterbank)\ntype: The type specifies the floating point type of the result (default: Float64).\n\nExample\n\njulia> result = EobAlgorithm(testImage);\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#multiresolution-decomposition","page":"Algorithms","title":"multiresolution decomposition","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"This algorithm will follow in a future release","category":"page"},{"location":"algorithms/#multireolution-orientaiton-estimation","page":"Algorithms","title":"multireolution orientaiton estimation","text":"","category":"section"},{"location":"algorithms/","page":"Algorithms","title":"Algorithms","text":"This algorithm will follow in a future release","category":"page"}]
}
